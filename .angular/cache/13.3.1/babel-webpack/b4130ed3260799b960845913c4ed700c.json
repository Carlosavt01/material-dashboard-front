{"ast":null,"code":"import _classCallCheck from \"/home/shlep/Desktop/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/shlep/Desktop/Frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as Chartist from 'chartist';\nimport * as i0 from \"@angular/core\";\nexport var DashboardComponent = /*#__PURE__*/(function () {\n  var DashboardComponent = /*#__PURE__*/function () {\n    function DashboardComponent() {\n      _classCallCheck(this, DashboardComponent);\n    }\n\n    _createClass(DashboardComponent, [{\n      key: \"startAnimationForLineChart\",\n      value: function startAnimationForLineChart(chart) {\n        var seq, delays, durations;\n        seq = 0;\n        delays = 80;\n        durations = 500;\n        chart.on('draw', function (data) {\n          if (data.type === 'line' || data.type === 'area') {\n            data.element.animate({\n              d: {\n                begin: 600,\n                dur: 700,\n                from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n                to: data.path.clone().stringify(),\n                easing: Chartist.Svg.Easing.easeOutQuint\n              }\n            });\n          } else if (data.type === 'point') {\n            seq++;\n            data.element.animate({\n              opacity: {\n                begin: seq * delays,\n                dur: durations,\n                from: 0,\n                to: 1,\n                easing: 'ease'\n              }\n            });\n          }\n        });\n        seq = 0;\n      }\n    }, {\n      key: \"startAnimationForBarChart\",\n      value: function startAnimationForBarChart(chart) {\n        var seq2, delays2, durations2;\n        seq2 = 0;\n        delays2 = 80;\n        durations2 = 500;\n        chart.on('draw', function (data) {\n          if (data.type === 'bar') {\n            seq2++;\n            data.element.animate({\n              opacity: {\n                begin: seq2 * delays2,\n                dur: durations2,\n                from: 0,\n                to: 1,\n                easing: 'ease'\n              }\n            });\n          }\n        });\n        seq2 = 0;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        /* ----------==========     Daily Sales Chart initialization For Documentation    ==========---------- */\n        var dataDailySalesChart = {\n          labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\n          series: [[12, 17, 7, 17, 23, 18, 38]]\n        };\n        var optionsDailySalesChart = {\n          lineSmooth: Chartist.Interpolation.cardinal({\n            tension: 0\n          }),\n          low: 0,\n          high: 50,\n          chartPadding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n          }\n        };\n        var dailySalesChart = new Chartist.Line('#dailySalesChart', dataDailySalesChart, optionsDailySalesChart);\n        this.startAnimationForLineChart(dailySalesChart);\n        /* ----------==========     Completed Tasks Chart initialization    ==========---------- */\n\n        var dataCompletedTasksChart = {\n          labels: ['12p', '3p', '6p', '9p', '12p', '3a', '6a', '9a'],\n          series: [[230, 750, 450, 300, 280, 240, 200, 190]]\n        };\n        var optionsCompletedTasksChart = {\n          lineSmooth: Chartist.Interpolation.cardinal({\n            tension: 0\n          }),\n          low: 0,\n          high: 1000,\n          chartPadding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n          }\n        };\n        var completedTasksChart = new Chartist.Line('#completedTasksChart', dataCompletedTasksChart, optionsCompletedTasksChart); // start animation for the Completed Tasks Chart - Line Chart\n\n        this.startAnimationForLineChart(completedTasksChart);\n        /* ----------==========     Emails Subscription Chart initialization    ==========---------- */\n\n        var datawebsiteViewsChart = {\n          labels: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n          series: [[542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895]]\n        };\n        var optionswebsiteViewsChart = {\n          axisX: {\n            showGrid: false\n          },\n          low: 0,\n          high: 1000,\n          chartPadding: {\n            top: 0,\n            right: 5,\n            bottom: 0,\n            left: 0\n          }\n        };\n        var responsiveOptions = [['screen and (max-width: 640px)', {\n          seriesBarDistance: 5,\n          axisX: {\n            labelInterpolationFnc: function labelInterpolationFnc(value) {\n              return value[0];\n            }\n          }\n        }]];\n        var websiteViewsChart = new Chartist.Bar('#websiteViewsChart', datawebsiteViewsChart, optionswebsiteViewsChart, responsiveOptions); //start animation for the Emails Subscription Chart\n\n        this.startAnimationForBarChart(websiteViewsChart);\n      }\n    }]);\n\n    return DashboardComponent;\n  }();\n\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)();\n  };\n\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 32,\n    vars: 0,\n    consts: [[1, \"main-content\"], [1, \"container-fluid\"], [1, \"row\"], [1, \"col-md-4\"], [1, \"card\", \"card-chart\"], [1, \"card-header\", \"card-header-success\"], [\"id\", \"dailySalesChart\", 1, \"ct-chart\"], [1, \"card-body\"], [1, \"card-title\"], [1, \"card-category\"], [1, \"text-success\"], [1, \"fa\", \"fa-long-arrow-up\"], [1, \"card-footer\"], [1, \"stats\"], [1, \"card-header\", \"card-header-warning\"], [\"id\", \"websiteViewsChart\", 1, \"ct-chart\"], [1, \"material-icons\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"div\", 5);\n        i0.ɵɵelement(7, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 7)(9, \"h4\", 8);\n        i0.ɵɵtext(10, \"Objetivos\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"p\", 9)(12, \"span\", 10);\n        i0.ɵɵelement(13, \"i\", 11);\n        i0.ɵɵtext(14, \" 55% \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(15, \" 55% en porcentaje a mejorar \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 12);\n        i0.ɵɵelement(17, \"div\", 13);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(18, \"div\", 3)(19, \"div\", 4)(20, \"div\", 14);\n        i0.ɵɵelement(21, \"div\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\", 7)(23, \"h4\", 8);\n        i0.ɵɵtext(24, \"Tiempo en la aplicacion\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"p\", 9);\n        i0.ɵɵtext(26, \"Ultimos 2 meses\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(27, \"div\", 12)(28, \"div\", 13)(29, \"i\", 16);\n        i0.ɵɵtext(30, \"Ultima vez\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(31, \" Ahora \");\n        i0.ɵɵelementEnd()()()()()()();\n      }\n    },\n    styles: [\"\"]\n  });\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}